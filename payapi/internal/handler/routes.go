// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	upstream_notify "tpay_backend/payapi/internal/handler/upstream_notify"
	"tpay_backend/payapi/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogRequest},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/pay",
					Handler: PayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay-order-query",
					Handler: PayOrderQueryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/transfer",
					Handler: TransferHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/system/transfer",
					Handler: SystemTransferHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/system/transfer-batch",
					Handler: SystemTransferBatchHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/transfer-order-query",
					Handler: TransferOrderQueryHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/query-balance",
					Handler: QueryBalanceHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/get-unionpay",
					Handler: GetUnionpayHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/get-static/:path/:filename",
					Handler: GetStaticHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogRequest},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/notify/totopay/pay",
					Handler: upstream_notify.TotopayPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/goldpays/pay",
					Handler: upstream_notify.GoldPaysPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/zf777pay/pay",
					Handler: upstream_notify.ThreeSevenPayPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/xpay/pay",
					Handler: upstream_notify.XPayPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/toppay/pay",
					Handler: upstream_notify.ToppayPayHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/toppay/transfer",
					Handler: upstream_notify.ToppayTransferHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/toppay/sign",
					Handler: upstream_notify.ToppaySignHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/totopay/transfer",
					Handler: upstream_notify.TotopayTransferHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/goldpays/transfer",
					Handler: upstream_notify.GoldPaysTransferHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/zf777pay/transfer",
					Handler: upstream_notify.ThreeSevenPayTransferHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/notify/xpay/transfer",
					Handler: upstream_notify.XPayTransferHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.LogRequest},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/test/pay",
					Handler: PayTestHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/test/transfer",
					Handler: TransferTestHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/test/system/transfer",
					Handler: SystemTransferTestHandler(serverCtx),
				},
			}...,
		),
	)
}
