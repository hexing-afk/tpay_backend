// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	export "tpay_backend/merchantapi/internal/handler/export"
	login "tpay_backend/merchantapi/internal/handler/login"
	order "tpay_backend/merchantapi/internal/handler/order"
	public "tpay_backend/merchantapi/internal/handler/public"
	"tpay_backend/merchantapi/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get-captcha",
				Handler: login.GetCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/t/pay/order/export",
				Handler: login.PayOrderExportTHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: public.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/base-info/get",
					Handler: public.GetBaseInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/base-info/update",
					Handler: public.UpdateBaseInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/md5-key/update",
					Handler: public.UpdateMd5KeyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login-pwd/update",
					Handler: public.UpdateLoginPassWordHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay-pwd/update",
					Handler: public.UpdatePayPassWordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/channel/list",
					Handler: public.GetChannelListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/channel-name/list",
					Handler: public.GetChannelNameListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wallet/info",
					Handler: public.GetWalletInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/bank-card/list",
					Handler: public.GetBankCardListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bank-card/add",
					Handler: public.AddBankCardHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bank-card/update",
					Handler: public.UpdateBankCardHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/bank-card/delete",
					Handler: public.DeleteBankCardHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/recharge",
					Handler: public.RechargeHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/platform-bank-card/list",
					Handler: public.PlatformBankCardListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/withdraw/config",
					Handler: public.GetWithdrawConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/withdraw",
					Handler: public.WithdrawHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/home-info",
					Handler: public.HomeInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/transfer-single",
					Handler: public.TransferSingleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upload-file",
					Handler: public.UploadFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/identify-batch-transfer-file",
					Handler: public.IdentifyBatchTransferFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/confirm-batch-transfer",
					Handler: public.ConfirmBatchTransferHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/batch-transfer-file",
					Handler: public.BatchTransferFileHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/pay/order/list",
					Handler: order.PayOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/transfer/manual-order/list",
					Handler: order.TransferManualOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/transfer/interface-order/list",
					Handler: order.TransferInterfaceOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/transfer/order/detail",
					Handler: order.TransferOrderDetailHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/wallet-log/list",
					Handler: order.GetWalletLogListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/recharge/order/list",
					Handler: order.RechargeOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/withdraw/order/list",
					Handler: order.WithdrawOrderListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay-test/modify-status",
					Handler: order.ModifyPayTestOrderStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/transfer-test/modify-status",
					Handler: order.ModifyTransferTestOrderStatusHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/pay/order/notify",
					Handler: order.PayOrderNotifyHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/transfer/order/notify",
					Handler: order.TransferOrderNotifyHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckLogin},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/wallet-log/export",
					Handler: export.WalletLogExportHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/pay/order/export",
					Handler: export.PayOrderExportHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/transfer/order/export",
					Handler: export.TransferOrderExportHandler(serverCtx),
				},
			}...,
		),
	)
}
